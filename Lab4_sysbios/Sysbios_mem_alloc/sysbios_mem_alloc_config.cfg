/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

/*
 *  ======== helloWorld.cfg ========
 */
/* ================ BIOS Configuration ================ */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var HeapMem = xdc.useModule('ti.sysbios.heaps.HeapMem');
var Memory = xdc.useModule('xdc.runtime.Memory');
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var HeapMultiBuf = xdc.useModule('ti.sysbios.heaps.HeapMultiBuf');

/*
 *  Build a custom BIOS library.
 *
 *  Since this program does not have any BIOS tasks, we remove Task
 *  from the configuration.  In order to do this, though, we cannot
 *  use the default instrumented BIOS library, so we use the custom
 *  library, which is smaller than the pre-built "instrumented" (default)
 *  and "non-instrumented" libraries.
 */
BIOS.libType = BIOS.LibType_Instrumented;
BIOS.taskEnabled = true;

var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* Make sure that only the Hello World event is logged. */
LoggingSetup.sysbiosTaskLogging = false;
var task0Params = new Task.Params();
task0Params.instance.name = "task0";
Program.global.task0 = Task.create("&task0Fxn", task0Params);
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "semaphore0";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore0 = Semaphore.create(1, semaphore0Params);




/* heap mem  */


var heapMem0Params = new HeapMem.Params();
heapMem0Params.instance.name = "heapMem0";
heapMem0Params.size = 1256;
heapMem0Params.sectionName = "myHeap";
Program.global.heapMem0 = HeapMem.create(heapMem0Params);






//Memory.common$.instanceHeap = Program.global.heapMem0;
//Memory.defaultHeapInstance = Program.global.heapMem0;

//var BIOS = xdc.useModule('ti.sysbios.BIOS');
//BIOS.heapSize = 0x900;
//BIOS.heapSection = "heapMem0";


/* test
Memory.common$.instanceSection = "heapMem0";
Program.sectMap["heapMem0"] = new Program.SectionSpec();
Program.sectMap["heapMem0"].loadSegment = "DDR3";

end test*/


/* Create a heap using HeapBuf */
var heapBufParams = new HeapBuf.Params;
heapBufParams.blockSize = 128;
heapBufParams.numBlocks = 6;
heapBufParams.align = 8;
heapBufParams.sectionName = "myHeapbufSection";
heapBufParams.instance.name = "myHeapbuf";
Program.global.myHeapbuf = HeapBuf.create(heapBufParams);
//Memory.defaultHeapInstance = Program.global.myHeap;

var BIOS = xdc.useModule('ti.sysbios.BIOS');
BIOS.heapSize = 4906;
//BIOS.heapSection = ".sysmem";
BIOS.heapSection = "myHeap";



Program.sectMap["myHeap"] = new Program.SectionSpec();
Program.sectMap["myHeap"].loadSegment = "DDR3";


var HeapMultiBuf = xdc.useModule('ti.sysbios.heaps.HeapMultiBuf');
/* HeapMultiBuf without blockBorrowing. */
/* Create as a global variable to access it from C Code. */
var heapMultiBufParams = new HeapMultiBuf.Params();
heapMultiBufParams.numBufs = 3;
heapMultiBufParams.blockBorrow = true;//false;
heapMultiBufParams.bufParams =
//[{blockSize: 16, numBlocks:8, align: 0},
[{blockSize: 16, numBlocks:2, align: 0},
{blockSize: 32, numBlocks:1, align: 0},
{blockSize: 128, numBlocks:1, align: 0}];
Program.global.myHeap = HeapMultiBuf.create(heapMultiBufParams);

Program.sectMap["myHeapbufSection"] = new Program.SectionSpec();
Program.sectMap["myHeapbufSection"].loadSegment = "DDR3";
