var Defaults = xdc.useModule('xdc.runtime.Defaults');
var Diags = xdc.useModule('xdc.runtime.Diags');
var Error = xdc.useModule('xdc.runtime.Error');
var Log = xdc.useModule('xdc.runtime.Log');
var LoggerBuf = xdc.useModule('xdc.runtime.LoggerBuf');
var Main = xdc.useModule('xdc.runtime.Main');
var Memory = xdc.useModule('xdc.runtime.Memory')
var SysMin = xdc.useModule('xdc.runtime.SysMin');
var System = xdc.useModule('xdc.runtime.System');
var Text = xdc.useModule('xdc.runtime.Text');

var BIOS = xdc.useModule('ti.sysbios.BIOS');
var HeapBuf = xdc.useModule('ti.sysbios.heaps.HeapBuf');
var Idle = xdc.useModule('ti.sysbios.knl.Idle');
var Queue = xdc.useModule('ti.sysbios.knl.Queue');
var Mailbox = xdc.useModule('ti.sysbios.knl.Mailbox');

/* 
 * Program.argSize sets the size of the .args section. 
 * The examples don't use command line args so argSize is set to 0.
 */
Program.argSize = 0x0;

/*
 * Uncomment this line to globally disable Asserts.
 * All modules inherit the default from the 'Defaults' module.  You
 * can override these defaults on a per-module basis using Module.common$. 
 * Disabling Asserts will save code space and improve runtime performance.
Defaults.common$.diags_ASSERT = Diags.ALWAYS_OFF;
 */

/*
 * Uncomment this line to keep module names from being loaded on the target.
 * The module name strings are placed in the .const section. Setting this
 * parameter to false will save space in the .const section.  Error and
 * Assert messages will contain an "unknown module" prefix instead
 * of the actual module name.
Defaults.common$.namedModule = false;
 */

/*
 * Comment this line out if you want to dynamically create instance
 * objects.
 */
Defaults.common$.memoryPolicy = xdc.module("xdc.runtime.Types").STATIC_POLICY;

/*
 * Minimize exit handler array in System.  The System module includes
 * an array of functions that are registered with System_atexit() to be
 * called by System_exit().
 */
System.maxAtexitHandlers = 4;       

/* 
 * Uncomment this line to disable the Error print function.  
 * We lose error information when this is disabled since the errors are
 * not printed.  Disabling the raiseHook will save some code space if
 * your app is not using System_printf() since the Error_print() function
 * calls System_printf().
Error.raiseHook = null;
 */

/* 
 * Uncomment this line to keep Error, Assert, and Log strings from being
 * loaded on the target.  These strings are placed in the .const section.
 * Setting this parameter to false will save space in the .const section.
 * Error, Assert and Log message will print raw ids and args instead of
 * a formatted message.
Text.isLoaded = false;
 */

/*
 * Uncomment this line to disable the output of characters by SysMin
 * when the program exits.  SysMin writes characters to a circular buffer.
 * This buffer can be viewed using the SysMin Output view in ROV.
SysMin.flushAtExit = false;
 */

/* ======== Setting Program paramters ======== */
/* Program object is available in a cfg file. */
/* Set system stack size */
Program.stack = 0x1000;

/*
 * Build a custom SYS/BIOS library from sources.
 */
BIOS.libType = BIOS.LibType_Custom;

/* ======== Set default System module ======== */
/* 
 * Configure SysMin for System_printfs because SysStd cannot be used when 
 * calling System_printf from Hwis and Swis 
 */
System.SupportProxy = SysMin;

/* ======== Heaps and Memory ======== */
/* Create a heap using ti.bios.HeapBuf. */
var heapBufParams = new HeapBuf.Params;
heapBufParams.numBlocks = 8;
heapBufParams.blockSize = 32;
heapBufParams.align = 32;
Program.global.heap0 = HeapBuf.create(heapBufParams);
/* Use heap0 as the default heap */
Memory.defaultHeapInstance = Program.global.heap0;

/* ======== Logging ======== */
/* 
 * Create and install logger for the whole system
 */
var loggerBufParams = new LoggerBuf.Params();
loggerBufParams.numEntries = 32;
var logger0 = LoggerBuf.create(loggerBufParams);
Defaults.common$.logger = logger0;
Main.common$.diags_INFO = Diags.ALWAYS_ON;

/* ======== Using the Idle Module ======== */
/* Add idle function to table where idl0Fxn is name of function in C file */
Idle.addFunc('&idl0Fxn');

/* ======== Using the Queue Module ======== */
/* Create a Queue Instance */
Program.global.queue0 = Queue.create();

/* ======== Using the Mailbox Module ======== */
/* Create a Mailbox and manipulate Instance parameters */
var mbxParams = new Mailbox.Params;
mbxParams.heap = Program.global.heap0;
Program.global.mbx0 = Mailbox.create(8, 2, mbxParams);
/* Create a Mailbox using default Instance parameters */
Program.global.mbx1 = Mailbox.create(16, 4);
