/*
 * Copyright (c) 2014, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 * */

/*
 *  ======== helloWorld.cfg ========
 */
/* ================ BIOS Configuration ================ */
var BIOS = xdc.useModule('ti.sysbios.BIOS');
var Swi = xdc.useModule('ti.sysbios.knl.Swi');
var Clock = xdc.useModule('ti.sysbios.knl.Clock');
var Semaphore = xdc.useModule('ti.sysbios.knl.Semaphore');
var Task = xdc.useModule('ti.sysbios.knl.Task');
var ti_sysbios_timers_timer64_Timer = xdc.useModule('ti.sysbios.timers.timer64.Timer');
var ti_sysbios_family_c64p_Hwi = xdc.useModule('ti.sysbios.family.c64p.Hwi');
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
var Load = xdc.useModule('ti.sysbios.utils.Load');
var Startup = xdc.useModule('xdc.runtime.Startup');
var Timer = xdc.useModule('ti.sysbios.hal.Timer');
/*
 *  Build a custom BIOS library.
 *
 *  Since this program does not have any BIOS tasks, we remove Task
 *  from the configuration.  In order to do this, though, we cannot
 *  use the default instrumented BIOS library, so we use the custom
 *  library, which is smaller than the pre-built "instrumented" (default)
 *  and "non-instrumented" libraries.
 */
BIOS.libType = BIOS.LibType_Custom;
BIOS.taskEnabled = true;

var LoggingSetup = xdc.useModule('ti.uia.sysbios.LoggingSetup');

/* Make sure that only the Hello World event is logged. */
LoggingSetup.sysbiosTaskLogging = true;
LoggingSetup.benchmarkLogging = true;
LoggingSetup.enableTaskProfiler = true;
LoggingSetup.enableContextAwareFunctionProfiler = true;
var swi0Params = new Swi.Params();
swi0Params.instance.name = "swi0";
swi0Params.priority = 7;
swi0Params.arg1 = 1;
Program.global.swi0 = Swi.create("&swi0Fxn", swi0Params);
var swi1Params = new Swi.Params();
swi1Params.instance.name = "swi1";
Program.global.swi1 = Swi.create("&swi1Fxn", swi1Params);
var clock0Params = new Clock.Params();
clock0Params.instance.name = "clock0";
clock0Params.period = 5;
clock0Params.startFlag = true;
Program.global.clock0 = Clock.create("&clk0Fxn", 5, clock0Params);
var clock1Params = new Clock.Params();
clock1Params.instance.name = "clock1";
Program.global.clock1 = Clock.create("&clk1Fxn", 10, clock1Params);
Clock.tickPeriod = 5000;
var semaphore0Params = new Semaphore.Params();
semaphore0Params.instance.name = "semaphore0";
semaphore0Params.mode = Semaphore.Mode_BINARY;
Program.global.semaphore0 = Semaphore.create(0, semaphore0Params);
var task0Params = new Task.Params();
task0Params.instance.name = "task0";
task0Params.priority = 15;
task0Params.stackSize = 1024;
task0Params.arg1 = 2;
Program.global.task0 = Task.create("&task0Fxn", task0Params);
var task1Params = new Task.Params();
task1Params.instance.name = "task1";
Program.global.task1 = Task.create("&task1Fxn", task1Params);

var hwi1Params = new Hwi.Params();
hwi1Params.instance.name = "hwi0";
hwi1Params.eventId = 64;
Program.global.hwi0 = Hwi.create(5, "&myHWI", hwi1Params);

Task.addHookSet({
 registerFxn: '&myRegister1_Task',
 createFxn: '&myCreateFxn',
 deleteFxn: '&myDeleteFxn',
 switchFxn: '&mySwitchFxn'
});
Load.hwiEnabled = true;
Load.swiEnabled = true;
Load.taskEnabled = true;
var task2Params = new Task.Params();
task2Params.instance.name = "task2";
task2Params.priority = 2;
Program.global.task2 = Task.create("&task2Fxn", task2Params);

LoggingSetup.sysbiosSwiLogging = true;
LoggingSetup.sysbiosHwiLogging = true;
LoggingSetup.sysbiosTaskLogging = true;

/************************************************/

/* Define and add two Hwi HookSets
* Notice, no deleteFxn is provided.
*/
var Hwi = xdc.useModule('ti.sysbios.hal.Hwi');
/* Hook Set 1 */
Hwi.addHookSet({
registerFxn: '&myRegister1_HWI',
/*createFxn: '&myCreate1',*/
beginFxn: '&myBegin1',
endFxn: '&myEnd1',
});



/* Hook Set 2 */


Hwi.addHookSet({
registerFxn: '&myRegister2_HWI',
/*createFxn: '&myCreate1',
beginFxn: '&myBegin1',
endFxn: '&myEnd1',*/
});
var timer0Params = new Timer.Params();
timer0Params.instance.name = "timer0";
timer0Params.period = 2000;
Program.global.timer0 = Timer.create(0, null, timer0Params);
Hwi.dispatcherSwiSupport = true;
