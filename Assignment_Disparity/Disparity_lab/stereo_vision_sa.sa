             .global stereo_vision_sa
             ; TODO: complete stereo vision function in linear assembly
             ;stereo_vision_sa(L, R, Disparity_Map, 60, 2);
stereo_vision_sa:  .cproc L,R,a_3,search,radius

				   ;window storage of 25bytes as 5 double words
				   .reg L1h:L1l,L2h:L2l,L3h:L3l,L4h:L4l,L5h:L5l
				   .reg R1h:R1l,R2h:R2l,R3h:R3l,R4h:R4l,R5h:R5l

				   ;partial results
				   .reg part, partlower, parthigher

				   ;summation with dotp fudge
				   .reg ones
				   mvkl 0x01010101,ones
				   mvkh 0x01010101,ones

				   .reg mask
				   mvkl 0x000000FF,mask
				   mvkh 0x000000FF,mask

				   ;summation
				   .reg sum, sumlower,sumhigher

				   ;loop counters
				   .reg i,j,k,s

				   ;conditional checking
				   .reg check

				   ;offsets
				   .reg offset,hoffset,woffset

				   ;distance and bestsum
				   .reg dist,bestsum

				   .reg height,width
				   ;height (223)
				   mvk 223, height
				   ;width (280)
				   mvk 280,width

				   ;start at max height-radius
				   sub height,radius,i
				   sub i,1,i
loop_height:

				   ;height offset
				   mpy width,i,hoffset
				   sub hoffset,width,hoffset
				   sub hoffset,width,hoffset

				   ;reset the width
				   sub width,radius,j
				   sub j,1,j
loop_width:

				   ;some large value to improve upon
				   mvk 10000,bestsum

				   ;width offset
||				   sub j,radius,woffset

				   ;grab the 5x5 window from the left image as double words
				   ;offset = (i-Radius)*Width+j-Radius
				   add woffset,hoffset,offset
				   ldndw   *L(offset),L1h:L1l

				   add offset,width,offset
				   ldndw   *L(offset),L2h:L2l

				   add offset,width,offset
				   ldndw   *L(offset),L3h:L3l

				   add offset,width,offset
				   ldndw   *L(offset),L4h:L4l

				   add offset,width,offset
				   ldndw   *L(offset),L5h:L5l

				   ;mask out the unwanted data
				   and mask,L1h,L1h
||				   and mask,L2h,L2h
||				   and mask,L3h,L3h
||				   and mask,L4h,L4h
||				   and mask,L5h,L5h

				   ;reset the search
||				   mv search,k

				   ;check to make sure the search doesn't go out of bounds
				   ;change if j-Radius-Search_Range < 0
				   sub j,radius,s
				   cmplt s,k,check
[check]            add s,1,k

				   zero s
loop_search:

				   ;grab the 25 byte window as double words
				   ;offset = (i-Radius)*Width+j-Radius-k
				   add woffset,hoffset,offset
				   sub offset,s,offset

				   ldndw   *R(offset),R1h:R1l
				   and mask,R1h,R1h
				   add offset,width,offset
				   ldndw   *R(offset),R2h:R2l
				   and mask,R2h,R2h
				   add offset,width,offset
				   ldndw   *R(offset),R3h:R3l
				   and mask,R3h,R3h
				   add offset,width,offset
				   ldndw   *R(offset),R4h:R4l
    			   and mask,R4h,R4h
				   add offset,width,offset
				   ldndw   *R(offset),R5h:R5l
				   and mask,R5h,R5h

				   ;sum of absolute differences

				   subabs4 R1h,L1h,parthigher
||				   subabs4 R1l,L1l,partlower

				   dotpu4 parthigher,ones,parthigher
||				   dotpu4 partlower,ones,partlower

				   add 0,parthigher,sumhigher
||				   add 0,partlower,sumlower

				   subabs4 R2h,L2h,parthigher
||				   subabs4 R2l,L2l,partlower

				   dotpu4 parthigher,ones,parthigher
||				   dotpu4 partlower,ones,partlower

				   add sumhigher,parthigher,sumhigher
||				   add sumlower,partlower,sumlower

				   subabs4 R3h,L3h,parthigher
||				   subabs4 R3l,L3l,partlower

				   dotpu4 parthigher,ones,parthigher
||				   dotpu4 partlower,ones,partlower

				   add sumhigher,parthigher,sumhigher
||				   add sumlower,partlower,sumlower

				   subabs4 R4h,L4h,parthigher
||				   subabs4 R4l,L4l,partlower

				   dotpu4 parthigher,ones,parthigher
||				   dotpu4 partlower,ones,partlower

				   add sumhigher,parthigher,sumhigher
||				   add sumlower,partlower,sumlower

				   subabs4 R5h,L5h,parthigher
||				   subabs4 R5l,L5l,partlower

				   dotpu4 parthigher,ones,parthigher
||				   dotpu4 partlower,ones,partlower

				   add sumhigher,parthigher,sumhigher
||				   add sumlower,partlower,sumlower

				   add sumhigher,sumlower,sum

				   ;see if the new sum is lower
				   cmplt sum,bestsum,check
				   ;store the current best sum and distance
[check]          mv sum,bestsum
[check]          mv s,dist

				   add s,1,s
				   sub k,s,check
;branch back if the search isn't complete
[check] b loop_search

				   ;update the disparity map with the best distance
                   mpy i,width,offset
                   add offset,j,offset
                   stb dist,*a_3[offset]

				   ;decrease the col number
				   sub j,radius,check

;see if all of the cols are done
[check] sub j,1,j
[check] b loop_width


				   ;decrease the row number
				   sub i,radius,check

;see if all of the rows are complete
[check] sub i,1,i
[check] b loop_height




             .return
             .endproc




